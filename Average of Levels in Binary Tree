/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int length(TreeNode* root, int l){
        if(root==nullptr){
            return l;
        }
        int lft = length(root->left, l+1);
        int rght = length(root->right, l+1);
        return max(lft, rght);
    }
    
    void bfs(TreeNode* root, vector<vector<int>> &v, int h){
        if(root==nullptr){
            return;
        }
        v[h].push_back(root->val);
        bfs(root->left, v, h+1);
        bfs(root->right, v, h+1);
    }
public:
    vector<double> averageOfLevels(TreeNode* root) {
        int l = length(root, 0);
        vector<vector<int>> v(l);
        bfs(root, v, 0);
        vector<double> res;
        double sum=0;
        for(int i=0;i<v.size();i++){
            sum=0;
            for(int j=0;j<v[i].size();j++){
                sum+=v[i][j];
            }
            res.push_back(double(sum/v[i].size()));
        }
        return res;
    }
};
