/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    void height(TreeNode* root, int a, int h, vector<int> &v){
        if(!root)
            return;
        if(!root->left && !root->right)
            return;
        if(root->val == a){
            v.push_back(0);
            v.push_back(root->val);
            return;
        }
        if((root->left && root->left->val == a) || (root->right && root->right->val == a)){
            v.push_back(h);
            v.push_back(root->val);
            return;
        }
        height(root->left, a, h+1, v);
        height(root->right, a, h+1, v);
    }
    
public:
    bool isCousins(TreeNode* root, int x, int y) {
        vector<int> dx, dy;
        height(root, x, 0, dx);
        height(root, y, 0, dy);
        //cout<<dx[0]<<" "<<dx[1]<<endl;
        //cout<<dy[0]<<" "<<dy[1]<<endl;
        if(dx[1]==dy[1])
            return false;
        if(dx[0]==dy[0])
            return true;
        return false;
    }
};
