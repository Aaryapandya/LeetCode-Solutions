class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& mat) {
        vector<vector<int>>res;
        int n = mat.size();
        if(n==0) return res;
        int m = mat[0].size();
        if(m==0) return res;
        vector<vector<bool>>pc(n,vector<bool>(m,false));
        vector<vector<bool>>at(n,vector<bool>(m,false));
        
        for(int i=0;i<n;i++){
            dfs(mat,pc,i,0,INT_MIN);
            dfs(mat,at,i,m-1,INT_MIN);
        }
        for(int j=0;j<m;j++){
            dfs(mat,pc,0,j,INT_MIN);
            dfs(mat,at,n-1,j,INT_MIN);
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(pc[i][j] && at[i][j])
                    res.push_back({i,j});
            }
        }
        return res;
    }    
    void dfs(vector<vector<int>>&mat,vector<vector<bool>> &visited,int i,int j,int prev){
        if(i<0 || j<0 || i>=mat.size() || j>= mat[0].size() || visited[i][j] || mat[i][j]<prev) return;
        visited[i][j] = true;
            dfs(mat,visited,i+1,j,mat[i][j]);
            dfs(mat,visited,i-1,j,mat[i][j]);
            dfs(mat,visited,i,j+1,mat[i][j]);
            dfs(mat,visited,i,j-1,mat[i][j]);
    }
};
