class Solution {
    bool search(vector<int>& arr, int sum){
        vector<vector<int>> dp (arr.size()+1, vector<int>(sum+1, false));
        dp[0][0] = true;
        for(int i=1;i<=arr.size();i++){
            dp[i][0] = true;
            for(int j=1;j<=sum;j++){
                if(j - arr[i-1] >= 0){
                    if(dp[i-1][j]) dp[i][j] = true;
                    else dp[i][j] = dp[i-1][j-arr[i-1]];
                } else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[arr.size()][sum];
    }

public:
    bool canPartition(vector<int>& nums) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        sort(nums.begin(), nums.end());
        int n=nums.size();
        if(n==1) return 0;
        int start = nums[0], end = nums[n-1];
        if(nums[0] == nums[n-1]){
            if(n%2) return 0;
            else return 1;
        }
        int sum=0;
        for(int i: nums){
            sum+=i;
        }
        if(sum%2) return 0;
        return search(nums, sum/2);
    }
};
